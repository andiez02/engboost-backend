# src/config/mongodb.py
from pymongo import MongoClient, ASCENDING, TEXT
from pymongo.server_api import ServerApi
from src.config.environment import EnvConfig
import logging
import certifi
from flask import g, current_app

class MongoDB:
    client = None
    db = None
    
    @classmethod
    def connect(cls):
        if cls.client is None:
            print(f"üîÑ Connecting to MongoDB with URI")
            # C·∫•u h√¨nh connection pooling
            cls.client = MongoClient(
                EnvConfig.MONGO_URI, 
                server_api=ServerApi('1'), 
                tlsCAFile=certifi.where(),
                maxPoolSize=50,  # TƒÉng k√≠ch th∆∞·ªõc pool
                minPoolSize=10,  # Duy tr√¨ √≠t nh·∫•t 10 k·∫øt n·ªëi
                maxIdleTimeMS=30000,  # ƒê√≥ng k·∫øt n·ªëi kh√¥ng ho·∫°t ƒë·ªông sau 30 gi√¢y
                connectTimeoutMS=5000,  # Timeout k·∫øt n·ªëi 5 gi√¢y
                socketTimeoutMS=30000,  # Timeout socket 30 gi√¢y
                waitQueueTimeoutMS=10000  # Timeout h√†ng ƒë·ª£i 10 gi√¢y
            )
            cls.db = cls.client.get_database(EnvConfig.MONGO_DB_NAME)
            try:
                cls.client.admin.command('ping')
                print("‚úÖ Connected to MongoDB Atlas successfully!")
                # T·∫°o indexes khi k·∫øt n·ªëi th√†nh c√¥ng
                cls.create_indexes()
            except Exception as e:
                print(f"‚ùå Connection failed: {e}")
    
    @classmethod
    def get_db(cls):
        if cls.db is None:
            cls.connect()
        return cls.db
    
    @classmethod
    def close(cls):
        if cls.client:
            cls.client.close()
            print("üõë MongoDB connection closed.")
    
    @classmethod
    def create_indexes(cls):
        """
        T·∫°o c√°c index c·∫ßn thi·∫øt cho c√°c collection trong database.
        """
        try:
            users_collection = cls.db.users
            
            # L·∫•y danh s√°ch index hi·ªán c√≥
            existing_indexes = users_collection.index_information()
            
            # T·∫°o index n·∫øu ch∆∞a t·ªìn t·∫°i
            if "username_1" not in existing_indexes:
                users_collection.create_index([("username", ASCENDING)], background=True)
            
            if "email_1" not in existing_indexes:
                users_collection.create_index([("email", ASCENDING)], background=True)
            
            if "role_1" not in existing_indexes:
                users_collection.create_index([("role", ASCENDING)], background=True)
            
            if "user_text_search" not in existing_indexes:
                users_collection.create_index([
                    ("username", TEXT),
                    ("email", TEXT),
                    ("fullName", TEXT)
                ], name="user_text_search", background=True)
            
            print("‚úÖ MongoDB indexes created successfully!")
        except Exception as e:
            logging.error(f"‚ùå Failed to create indexes: {e}")
            print(f"‚ùå Failed to create indexes: {e}")
